{
  "address": "0x2e3bD83CAe006A14BcDd2b79e2b8Ac50962C78dE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "avatarStyle",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "topType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "hairColor",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "eyebrowType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "eyeType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "accessoriesType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "mouthType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "facialHairType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "clotheType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "clotheColor",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "graphicType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destinationChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "srcChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mintFor",
          "type": "address"
        }
      ],
      "name": "CreateMintRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "avatarStyle",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "topType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "hairColor",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "eyebrowType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "eyeType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "accessoriesType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mouthType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "facialHairType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "clotheType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "clotheColor",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "graphicType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "destinationChain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "srcChain",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "mintFor",
          "type": "address"
        }
      ],
      "name": "createMintRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "avatarStyle",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "topType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "hairColor",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "eyebrowType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "eyeType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "accessoriesType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mouthType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "facialHairType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "clotheType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "clotheColor",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "graphicType",
          "type": "string"
        }
      ],
      "name": "editAvatar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "avatarStyle",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "topType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "hairColor",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "eyebrowType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "eyeType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "accessoriesType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mouthType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "facialHairType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "clotheType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_mintFor",
          "type": "address"
        }
      ],
      "name": "mintItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "myAvatars",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x228895b4f22ad6e7aadc77ad3a2d475e331ed6d28503178bf196a21c8af5faa2",
  "receipt": {
    "to": null,
    "from": "0x0dB2bcd99F99270b0F864a36412A37c51Cb78830",
    "contractAddress": "0x2e3bD83CAe006A14BcDd2b79e2b8Ac50962C78dE",
    "transactionIndex": 0,
    "gasUsed": "2422543",
    "logsBloom": "0x
    "blockHash": "0x8620afca030609798bde37d69a708e142f0cb067b81ce0f32892bae53c8a8b0a",
    "transactionHash": "0x228895b4f22ad6e7aadc77ad3a2d475e331ed6d28503178bf196a21c8af5faa2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 27082975,
        "transactionHash": "0x228895b4f22ad6e7aadc77ad3a2d475e331ed6d28503178bf196a21c8af5faa2",
        "address": "0x2e3bD83CAe006A14BcDd2b79e2b8Ac50962C78dE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000db2bcd99f99270b0f864a36412a37c51cb78830"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8620afca030609798bde37d69a708e142f0cb067b81ce0f32892bae53c8a8b0a"
      }
    ],
    "blockNumber": 27082975,
    "cumulativeGasUsed": "2422543",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0dB2bcd99F99270b0F864a36412A37c51Cb78830"
  ],
  "numDeployments": 1,
  "solcInputHash": "2ea0d33149ebcebeba343bfdc573d22b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"avatarStyle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"topType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hairColor\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"eyebrowType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"eyeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"accessoriesType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mouthType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"facialHairType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"clotheType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"clotheColor\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"graphicType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintFor\",\"type\":\"address\"}],\"name\":\"CreateMintRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"avatarStyle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"topType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hairColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"eyebrowType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"eyeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"accessoriesType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mouthType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"facialHairType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"clotheType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"clotheColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"graphicType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"destinationChain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mintFor\",\"type\":\"address\"}],\"name\":\"createMintRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"avatarStyle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"topType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hairColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"eyebrowType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"eyeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"accessoriesType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mouthType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"facialHairType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"clotheType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"clotheColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"graphicType\",\"type\":\"string\"}],\"name\":\"editAvatar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"avatarStyle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"topType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hairColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"eyebrowType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"eyeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"accessoriesType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mouthType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"facialHairType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"clotheType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_mintFor\",\"type\":\"address\"}],\"name\":\"mintItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"myAvatars\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Minter.sol\":\"Nimbus\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/Minter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\ncontract Nimbus is ERC721, Ownable {\\n  using Strings for uint256;\\n  using Utils for uint160;\\n  using Counters for Counters.Counter;\\n  Counters.Counter private _tokenIds;\\n  struct NFTData{\\n        string name;\\n        string avatarStyle;\\n        // string skinColor;\\n        string topType;\\n        // string hatColor;\\n        string hairColor;\\n        string eyebrowType;\\n        string eyeType;\\n        string accessoriesType;\\n        string mouthType;\\n        string facialHairType;\\n        // string facialHairColor;\\n        string clotheType;\\n        string clotheColor;\\n        string graphicType;\\n        uint256 destinationChain;\\n        uint256 srcChain;\\n        address mintFor;\\n  }\\n\\n    // State Variables\\n    mapping(uint256 => string) _nftName;\\n    mapping(uint256 => string) _avatarStyle;\\n    // mapping(uint256 => string) _skinColor;\\n    mapping(uint256 => string) _topType;\\n    // mapping(uint256 => string) _hatColor;\\n    mapping(uint256 => string) _hairColor;\\n    mapping(uint256 => string) _eyebrowType;\\n    mapping(uint256 => string) _eyeType;\\n    mapping(uint256 => string) _accessoriesType;\\n    mapping(uint256 => string) _mouthType;\\n    mapping(uint256 => string) _facialHairType;\\n    // mapping(uint256 => string) _facialHairColor;\\n    mapping(uint256 => string) _clotheType;\\n    mapping(uint256 => string) _clotheColor;\\n    mapping(uint256 => string) _graphicType;\\n\\n  event CreateMintRequest (\\n        string name,\\n        string avatarStyle,\\n        // string skinColor,\\n        string topType,\\n        // string hatColor,\\n        string hairColor,\\n        string eyebrowType,\\n        string eyeType,\\n        string accessoriesType,\\n        string mouthType,\\n        string facialHairType,\\n        // string facialHairColor,\\n        string clotheType,\\n        string clotheColor,\\n        string graphicType,\\n        uint256 destinationChain,\\n        uint256 srcChain,\\n        address mintFor\\n  );\\n\\n  constructor(address _owner) ERC721(\\\"NIMBUS\\\", \\\"NIM\\\"){}\\n\\n  function createMintRequest(\\n        // NFTData memory _data\\n        string memory name,\\n        string memory avatarStyle,\\n        // string skinColor,\\n        string memory topType,\\n        // string hatColor,\\n        string memory hairColor,\\n        string memory eyebrowType,\\n        string memory eyeType,\\n        string memory accessoriesType,\\n        string memory mouthType,\\n        string memory facialHairType,\\n        // string facialHairColor,\\n        string memory clotheType,\\n        string memory clotheColor,\\n        string memory graphicType,\\n        uint256 destinationChain,\\n        uint256 srcChain,\\n        address mintFor\\n  ) public {\\n\\n        emit CreateMintRequest(\\n         name,\\n         avatarStyle,\\n        //  skinColor,\\n         topType,\\n        //  hatColor,\\n         hairColor,\\n         eyebrowType,\\n         eyeType,\\n         accessoriesType,\\n         mouthType,\\n         facialHairType,\\n        //  facialHairColor,\\n         clotheType,\\n         clotheColor,\\n         graphicType,\\n         destinationChain,\\n         srcChain,\\n         mintFor\\n      );\\n      \\n  }\\n\\n  // functions\\n  function mintItem(\\n    string memory name,\\n    string memory avatarStyle,\\n    // string memory skinColor,\\n    string memory topType,\\n    // string memory hatColor,\\n    string memory hairColor,\\n    string memory eyebrowType,\\n    string memory eyeType,\\n    string memory accessoriesType,\\n    string memory mouthType,\\n    string memory facialHairType,\\n    // string memory facialHairColor,\\n    string memory clotheType,\\n    // string memory clotheColor,\\n    // string memory graphicType,\\n    address _mintFor\\n  ) public returns (uint256) {\\n    _tokenIds.increment();\\n    uint256 id = _tokenIds.current();\\n    _mint(_mintFor, id);\\n\\n    _nftName[id] = name;\\n    _avatarStyle[id] = avatarStyle;\\n    // _skinColor[id] = skinColor;\\n    _topType[id] = topType;\\n    // _hatColor[id] = hatColor;\\n    _hairColor[id] = hairColor;\\n    _eyebrowType[id] = eyebrowType;\\n    _eyeType[id] = eyeType;\\n    _accessoriesType[id] = accessoriesType;\\n    _mouthType[id] = mouthType;\\n    _facialHairType[id] = facialHairType;\\n    // _facialHairColor[id] = facialHairColor;\\n    _clotheType[id] = clotheType;\\n    // _clotheColor[id] = clotheColor;\\n    // _graphicType[id] = graphicType;\\n\\n    return id;\\n  }\\n\\n  function editAvatar(\\n    uint256 _id,\\n    string memory name,\\n    string memory avatarStyle,\\n    // string memory skinColor,\\n    string memory topType,\\n    // string memory hatColor,\\n    string memory hairColor,\\n    string memory eyebrowType,\\n    string memory eyeType,\\n    string memory accessoriesType,\\n    string memory mouthType,\\n    string memory facialHairType,\\n    // string memory facialHairColor,\\n    string memory clotheType,\\n    string memory clotheColor,\\n    string memory graphicType\\n  ) public {\\n\\n    // require(msg.sender == ownerOf(_id), \\\"You are not the owner of this NFT\\\");\\n    if (bytes(name).length > 0) {\\n      _nftName[_id] = name;\\n    }\\n    if (bytes(avatarStyle).length > 0) {\\n      _avatarStyle[_id] = avatarStyle;\\n    }\\n    // if (bytes(skinColor).length > 0) {\\n    //   _skinColor[_id] = skinColor;\\n    // }\\n    if (bytes(topType).length > 0) {\\n      _topType[_id] = topType;\\n    }\\n    // if (bytes(hatColor).length > 0) {\\n    //   _hatColor[_id] = hatColor;\\n    // }\\n    if (bytes(hairColor).length > 0) {\\n      _hairColor[_id] = hairColor;\\n    }\\n    if (bytes(eyebrowType).length > 0) {\\n      _eyebrowType[_id] = eyebrowType;\\n    }\\n    if (bytes(eyeType).length > 0) {\\n      _eyeType[_id] = eyeType;\\n    }\\n    if (bytes(accessoriesType).length > 0) {\\n      _accessoriesType[_id] = accessoriesType;\\n    }\\n    if (bytes(mouthType).length > 0) {\\n      _mouthType[_id] = mouthType;\\n    }\\n    if (bytes(facialHairType).length > 0) {\\n      _facialHairType[_id] = facialHairType;\\n    }\\n    // if (bytes(facialHairColor).length > 0) {\\n    //   _facialHairColor[_id] = facialHairColor;\\n    // }\\n    if (bytes(clotheType).length > 0) {\\n      _clotheType[_id] = clotheType;\\n    }\\n    uint id;\\n    {\\n        id = _id;\\n        if (bytes(clotheColor).length > 0) {\\n      _clotheColor[id] = clotheColor;\\n         }\\n        if (bytes(graphicType).length > 0) {\\n        _graphicType[id] = graphicType;\\n        }\\n    }\\n    \\n  }\\n\\n  function myAvatars(address _addr) public view returns (uint256[] memory) {\\n    uint256[] memory myAvatarsArr = new uint256[](balanceOf(_addr));\\n    uint256 index = 0;\\n    for (uint256 i = 1; i <= _tokenIds.current(); i++) {\\n      if (ownerOf(i) == _addr) {\\n        myAvatarsArr[index] = i;\\n        index++;\\n      }\\n    }\\n    return myAvatarsArr;\\n  }\\n\\n  function getQueryString(uint256 id) private view returns (string memory) {\\n    string memory queryParams = string(\\n      abi.encodePacked(\\n        \\\"?avatarStyle=\\\",\\n        _avatarStyle[id],\\n        // \\\"&skinColor=\\\",\\n        // _skinColor[id],\\n        \\\"&topType=\\\",\\n        _topType[id],\\n        // \\\"&hatColor=\\\",\\n        // _hatColor[id],\\n        \\\"&hairColor=\\\",\\n        _hairColor[id],\\n        \\\"&eyebrowType=\\\",\\n        _eyebrowType[id],\\n        \\\"&eyeType=\\\",\\n        _eyeType[id],\\n        \\\"&accessoriesType=\\\",\\n        _accessoriesType[id],\\n        \\\"&mouthType=\\\",\\n        _mouthType[id],\\n        \\\"&facialHairType=\\\",\\n        _facialHairType[id],\\n        // \\\"&facialHairColor=\\\",\\n        // _facialHairColor[id],\\n        \\\"&clotheType=\\\",\\n        _clotheType[id],\\n        \\\"&clotheColor=\\\",\\n        _clotheColor[id],\\n        \\\"&graphicType=\\\",\\n        _graphicType[id]\\n      )\\n    );\\n    return queryParams;\\n  }\\n\\n  function getAttributes(uint256 id) private view returns (string memory) {\\n    string memory attributes = string(\\n      abi.encodePacked(\\n        '{ \\\"trait_type\\\": \\\"avatarStyle\\\", \\\"value\\\" :\\\"',\\n        _avatarStyle[id],\\n        '\\\"}, {\\\"trait_type\\\": \\\"topType\\\", \\\"value\\\" :\\\"',\\n        _topType[id],\\n        '\\\"},{\\\"trait_type\\\": \\\"hairColor\\\", \\\"value\\\" :\\\"',\\n        _hairColor[id],\\n        '\\\"}, {\\\"trait_type\\\": \\\"eyebrowType\\\", \\\"value\\\" :\\\"',\\n        _eyebrowType[id],\\n        '\\\"}, {\\\"trait_type\\\": \\\"eyeType\\\", \\\"value\\\" :\\\"',\\n        _eyeType[id],\\n        '\\\"}, {\\\"trait_type\\\": \\\"accessoriesType\\\", \\\"value\\\" :\\\"',\\n        _accessoriesType[id],\\n        '\\\"},{\\\"trait_type\\\": \\\"mouthType\\\", \\\"value\\\" :\\\"',\\n        _mouthType[id],\\n        '\\\"}, {\\\"trait_type\\\": \\\"facialHairType\\\", \\\"value\\\" :\\\"',\\n        _facialHairType[id],\\n        '\\\"}, {\\\"trait_type\\\": \\\"clotheType\\\", \\\"value\\\" :\\\"',\\n        _clotheType[id],\\n        '\\\"}, {\\\"trait_type\\\": \\\"clotheColor\\\", \\\"value\\\" :\\\"',\\n        _clotheColor[id],\\n        '\\\"},{\\\"trait_type\\\": \\\"graphicType\\\", \\\"value\\\" :\\\"',\\n        _graphicType[id],\\n        '\\\"} '\\n      )\\n    );\\n\\n    return attributes;\\n  }\\n\\n  function tokenURI(uint256 id) public view override returns (string memory) {\\n    // require(_exists(id), \\\"not exist\\\");\\n\\n    string memory name = string(abi.encodePacked(_nftName[id]));\\n    string memory description = string(abi.encodePacked(\\\"Coolest pfp in town\\\"));\\n    string memory baseURI = \\\"https://avataaars.io/\\\";\\n    string memory queryParams = getQueryString(id);\\n    string memory dynamicImageUri = string(abi.encodePacked(baseURI, queryParams));\\n    string memory attributes = getAttributes(id);\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{\\\"name\\\":\\\"',\\n                name,\\n                '\\\", \\\"description\\\":\\\"',\\n                description,\\n                '\\\", \\\"attributes\\\": [',\\n                attributes,\\n                '], \\\"owner\\\":\\\"',\\n                (uint160(ownerOf(id))).toHexString(20),\\n                '\\\", \\\"image\\\": \\\"',\\n                dynamicImageUri,\\n                '\\\"}'\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x5946537e94e65e57ff427c8404b1ffeaf400c0fef8ff16b4f1728c487fe58057\",\"license\":\"MIT\"},\"contracts/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Utils {\\n  bytes16 internal constant ALPHABET = \\\"0123456789abcdef\\\";\\n\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = ALPHABET[value & 0xf];\\n      value >>= 4;\\n    }\\n    return string(buffer);\\n  }\\n}\\n\",\"keccak256\":\"0x6d0d62ee8b61095a68d0b047d60400177a827bbe2d92340e1b0c7168f78ce818\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200037b576001600160401b03601f19601f62002cff38819003828101841686018581118782101762000365578692829160405283396020958691810103126200037b57516001600160a01b039390848116036200037b576200006462000380565b9160068352654e494d42555360d01b868401526200008162000380565b9560038752624e494d60e81b8188015283519483861162000365576000958654956001968781811c911680156200035a575b858210146200034657908186849311620002f3575b5084908683116001146200029257899262000286575b5050600019600383901b1c191690861b1786555b8751938411620002725784548581811c9116801562000267575b8382101462000253578381116200020b575b5081928411600114620001a55750508394958293949262000199575b5050600019600383901b1c191690821b1790555b600654903360018060a01b03198316176006557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0604051933393169180a361295e9081620003a18239f35b0151905038806200013a565b8392919216968486528286209286905b898210620001f3575050838596979810620001d9575b505050811b0190556200014e565b015160001960f88460031b161c19169055388080620001cb565b808785968294968601518155019501930190620001b5565b8587528287208480870160051c82019285881062000249575b0160051c019086905b8281106200023d5750506200011e565b8881550186906200022d565b9250819262000224565b634e487b7160e01b87526022600452602487fd5b90607f16906200010c565b634e487b7160e01b86526041600452602486fd5b015190503880620000de565b9084899416918a8052868b20928b5b88828210620002dc5750508411620002c2575b505050811b018655620000f2565b015160001960f88460031b161c19169055388080620002b4565b8385015186558c97909501949384019301620002a1565b9091508880528489208680850160051c8201928786106200033c575b918a91869594930160051c01915b8281106200032d575050620000c8565b8b81558594508a91016200031d565b925081926200030f565b634e487b7160e01b89526022600452602489fd5b90607f1690620000b3565b634e487b7160e01b600052604160045260246000fd5b600080fd5b60408051919082016001600160401b03811183821017620003655760405256fe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a7146101a357806306fdde031461019a578063081812fc14610191578063095ea7b31461018857806323b872dd1461017f5780633d0087cc1461017657806342842e0e1461016d5780636352211e1461016457806370a082311461015b578063715018a614610152578063768c8a0a146101495780638da5cb5b1461014057806395d89b4114610137578063a22cb4651461012e578063b88d4fde14610125578063c87b56dd1461011c578063d94719dc14610113578063e985e9c51461010a578063f20fd529146101015763f2fde38b146100f957600080fd5b61000e611066565b5061000e610f21565b5061000e610ec3565b5061000e610def565b5061000e610b9b565b5061000e610b3b565b5061000e610a4e565b5061000e6109a8565b5061000e61097e565b5061000e610852565b5061000e6107f3565b5061000e6107c7565b5061000e6107a8565b5061000e610761565b5061000e61060a565b5061000e610504565b5061000e6103f8565b5061000e61036d565b5061000e610289565b5061000e6101be565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5760206004356101de816101ac565b63ffffffff60e01b166380ac58cd60e01b811490811561021c575b811561020b575b506040519015158152f35b6301ffc9a760e01b14905038610200565b635b5e139f60e01b811491506101f9565b60005b8381106102405750506000910152565b8181015183820152602001610230565b906020916102698151809281855285808601910161022d565b601f01601f1916010190565b906020610286928181520190610250565b90565b503461000e5760008060031936011261036a57604051908080546102ac8161126e565b8085529160019180831690811561034057506001146102e6575b6102e2856102d68187038261056d565b60405191829182610275565b0390f35b80809450527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8284106103285750505081016020016102d6826102e26102c6565b8054602085870181019190915290930192810161030d565b8695506102e2969350602092506102d694915060ff191682840152151560051b82010192936102c6565b80fd5b503461000e57602036600319011261000e57602061038c60043561131a565b6040516001600160a01b039091168152f35b600435906001600160a01b038216820361000e57565b6101c435906001600160a01b038216820361000e57565b61014435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e5761041261039e565b60243561041e8161124b565b916001600160a01b038084169082168114610480576104509361044b913314908115610452575b506112a8565b6116c1565b005b6001600160a01b0316600090815260056020908152604080832033845290915290205460ff16905038610445565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b606090600319011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e57610450610516366104cf565b916105296105248433611486565b611358565b611558565b50634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761056057604052565b61056861052e565b604052565b90601f801991011681019081106001600160401b0382111761056057604052565b6020906001600160401b0381116105ab575b601f01601f19160190565b6105b361052e565b6105a0565b9291926105c48261058e565b916105d2604051938461056d565b82948184528183011161000e578281602093846000960137010152565b9080601f8301121561000e57816020610286933591016105b8565b503461000e576101e036600319011261000e5760046001600160401b03813581811161000e5761063d90369084016105ef565b60243582811161000e5761065490369085016105ef565b9060443583811161000e5761066c90369086016105ef565b9260643581811161000e5761068490369087016105ef565b9060843581811161000e5761069c90369088016105ef565b60a43582811161000e576106b390369089016105ef565b60c43583811161000e576106ca9036908a016105ef565b60e43584811161000e576106e19036908b016105ef565b906101043585811161000e576106fa9036908c016105ef565b926101243586811161000e576107139036908d016105ef565b946101443587811161000e578c61072c913691016105ef565b966101643590811161000e576104509c610748913691016105ef565b976107516103b4565b9b6101a4359b610184359b61185e565b503461000e57610450610773366104cf565b9060405192602084018481106001600160401b0382111761079b575b604052600084526113eb565b6107a361052e565b61078f565b503461000e57602036600319011261000e57602061038c60043561124b565b503461000e57602036600319011261000e5760206107eb6107e661039e565b611188565b604051908152f35b503461000e5760008060031936011261036a5761080e611130565b600680546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461000e5761016036600319011261000e576001600160401b036004803582811161000e5761088590369083016105ef565b60243583811161000e5761089c90369084016105ef565b60443584811161000e576108b390369085016105ef565b60643585811161000e576108ca90369086016105ef565b60843586811161000e576108e190369087016105ef565b60a43587811161000e576108f890369088016105ef565b60c43588811161000e5761090f90369089016105ef565b9160e43589811161000e576109279036908a016105ef565b93610104358a811161000e576109409036908b016105ef565b95610124359a8b1161000e5761095f61096e9a6102e29c3691016105ef565b976109686103cb565b99611ab8565b6040519081529081906020820190565b503461000e57600036600319011261000e576006546040516001600160a01b039091168152602090f35b503461000e5760008060031936011261036a57604051908060018054916109ce8361126e565b8086529282811690811561034057506001146109f4576102e2856102d68187038261056d565b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b828410610a365750505081016020016102d6826102e26102c6565b80546020858701810191909152909301928101610a1b565b503461000e57604036600319011261000e57610a6861039e565b602435801515810361000e576001600160a01b03821691338314610af65781610ab3610ac49233600052600560205260406000209060018060a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b503461000e57608036600319011261000e57610b5561039e565b610b5d6103e2565b606435916001600160401b03831161000e573660238401121561000e57610b916104509336906024816004013591016105b8565b91604435916113eb565b503461000e5760208060031936011261000e57600435610bc5816000526008602052604060002090565b60409182518092858201610bd891611f50565b0391601f19928381018252610bed908261056d565b83519182868101610c18906013907221b7b7b632b9ba103833381034b7103a37bbb760691b81520190565b038481018452610c28908461056d565b610c30611fd3565b90610c3a81612209565b918651928391898301610c4c91612022565b610c5591612022565b038581018352610c65908361056d565b610c6e81612458565b90610c789061124b565b610c8a906001600160a01b031661288a565b908651948594898601610cad90600990683d913730b6b2911d1160b91b81520190565b610cb691612022565b71111610113232b9b1b934b83a34b7b7111d1160711b8152601201610cda91612022565b71222c202261747472696275746573223a205b60701b8152601201610cfe91612022565b6b2e96101137bbb732b9111d1160a11b8152600c01610d1c91612022565b6c1116101134b6b0b3b2911d101160991b8152600d01610d3b91612022565b61227d60f01b8152600201038281018252610d56908261056d565b610d5f90612120565b82517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000094810194855293849190601d01610d9891612022565b039081018352610da8908361056d565b516102e2819282610275565b6020908160408183019282815285518094520193019160005b828110610ddb575050505090565b835185529381019392810192600101610dcd565b503461000e5760208060031936011261000e57610e0a61039e565b610e1381611188565b91610e1d83611ee0565b92610e2b604051948561056d565b808452610e3a601f1991611ee0565b01368285013760075491600091906001600160a01b039081169060015b85811115610e6d57604051806102e28982610db4565b8282610e788361124b565b1614610e8d575b610e8890611f1d565b610e57565b93610eae610e88918851811015610eb6575b86868260051b8b010152611f1d565b949050610e7f565b610ebe611f39565b610e9f565b503461000e57604036600319011261000e57602060ff610f15610ee461039e565b610eec6103e2565b6001600160a01b0391821660009081526005865260408082209290931681526020919091522090565b54166040519015158152f35b503461000e576101a036600319011261000e576001600160401b0360243581811161000e57610f55600491369083016105ef565b60443583811161000e57610f6c90369084016105ef565b60643584811161000e57610f8390369085016105ef565b60843585811161000e57610f9a90369086016105ef565b60a43586811161000e57610fb190369087016105ef565b60c43587811161000e57610fc890369088016105ef565b60e43588811161000e57610fdf90369089016105ef565b916101043589811161000e57610ff89036908a016105ef565b93610124358a811161000e576110119036908b016105ef565b95610144358b811161000e5761102a9036908c016105ef565b97610164358c811161000e576110439036908d016105ef565b99610184359c8d1161000e5761105f8c6104509e3691016105ef565b9b35611d0d565b503461000e57602036600319011261000e5761108061039e565b611088611130565b6001600160a01b039081169081156110dc57600654826bffffffffffffffffffffffff60a01b821617600655167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6006546001600160a01b0316330361114457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160a01b031680156111a857600052600360205260406000205490565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b1561120657565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152600260205260409020546001600160a01b03166102868115156111ff565b90600182811c9216801561129e575b602083101461128857565b634e487b7160e01b600052602260045260246000fd5b91607f169161127d565b156112af57565b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b60008181526002602052604090205461133d906001600160a01b031615156111ff565b6000908152600460205260409020546001600160a01b031690565b1561135f57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b60405190602082018281106001600160401b038211176113de575b60405260008252565b6113e661052e565b6113d5565b9061140f9392916113ff6105248433611486565b61140a838383611558565b61179b565b1561141657565b60405162461bcd60e51b81528061142f60048201611433565b0390fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b6001600160a01b03806114988461124b565b1692818316928484149485156114ce575b505083156114b8575b50505090565b6114c49192935061131a565b16143880806114b2565b60009081526005602090815260408083206001600160a01b03949094168352929052205460ff16935038806114a9565b1561150557565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b61157c906115658461124b565b6001600160a01b03828116939091821684146114fe565b8316928315611670576115ef611649926115ae856115a861159c8a61124b565b6001600160a01b031690565b146114fe565b6115d56115c5886000526004602052604060002090565b80546001600160a01b0319169055565b6001600160a01b0316600090815260036020526040902090565b80546000190190556001600160a01b03811660009081526003602052604090206001815401905561162a856000526002602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b600082815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b03806116fa8461124b565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4565b9081602091031261000e5751610286816101ac565b6001600160a01b03918216815291166020820152604081019190915260806060820181905261028692910190610250565b3d15611796573d9061177c8261058e565b9161178a604051938461056d565b82523d6000602084013e565b606090565b92909190823b15611855576117ce926020926000604051809681958294630a85bd0160e11b9a8b8552336004860161173a565b03926001600160a01b03165af160009181611825575b50611817576117f161176b565b805190816118125760405162461bcd60e51b81528061142f60048201611433565b602001fd5b6001600160e01b0319161490565b61184791925060203d811161184e575b61183f818361056d565b810190611725565b90386117e4565b503d611835565b50505050600190565b9d9a98969492909c99979593916040519e8f9e8f916101e0808452830161188491610250565b828103602084015261189591610250565b9080820390604001526118a791610250565b8d810360608f01526118b891610250565b8c810360808e01526118c991610250565b8b810360a08d01526118da91610250565b8a810360c08c01526118eb91610250565b89810360e08b01526118fc91610250565b8881036101008a015261190e91610250565b87810361012089015261192091610250565b86810361014088015261193291610250565b85810361016087015261194491610250565b6101808501939093526101a08401526001600160a01b03166101c0830152037fec6f5abb6d06f755fe8458400db290a6d243e9739e9df87d230b155081d9a21391a1565b90601f811161199657505050565b600091825260208220906020601f850160051c830194106119d2575b601f0160051c01915b8281106119c757505050565b8181556001016119bb565b90925082906119b2565b91909182516001600160401b038111611aab575b611a04816119fe845461126e565b84611988565b602080601f8311600114611a40575081929394600092611a35575b50508160011b916000199060031b1c1916179055565b015190503880611a1f565b90601f19831695611a5685600052602060002090565b926000905b888210611a9357505083600195969710611a7a575b505050811b019055565b015160001960f88460031b161c19169055388080611a70565b80600185968294968601518155019501930190611a5b565b611ab361052e565b6119f0565b929693949897959190986001600754019a8b60075560018060a01b038116968715611c7d57611c05611c699a611bc88f6102869f611c2d98611be1611bf592611c559f611c419e86611bcd92611b8e611c199e611b39611b34611b3086600052600260205260018060a01b0360406000205416151590565b1590565b611cc1565b600084815260026020526040902054611b5b906001600160a01b031615611cc1565b6001600160a01b03811660009081526003602052604090206001815401905561162a846000526002602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4611bc8876000526008602052604060002090565b6119dc565b611bc8856000526009602052604060002090565b611bc883600052600a602052604060002090565b600052600b602052604060002090565b611bc88d600052600c602052604060002090565b611bc88b600052600d602052604060002090565b611bc889600052600e602052604060002090565b611bc887600052600f602052604060002090565b611bc8856000526010602052604060002090565b611bc8836000526011602052604060002090565b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b15611cc857565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b809c9b9a9998979695949392918051611ec2575b50508051611ea4575b508051611e86575b508051611e68575b508051611e4a575b508051611e2c575b508051611e0e575b508051611df0575b508051611dd2575b508051611db4575b508051611d96575b508051611d7d575050565b611bc8611d94926000526013602052604060002090565b565b611dae90611bc8846000526012602052604060002090565b38611d72565b611dcc90611bc8856000526011602052604060002090565b38611d6a565b611dea90611bc8866000526010602052604060002090565b38611d62565b611e0890611bc887600052600f602052604060002090565b38611d5a565b611e2690611bc888600052600e602052604060002090565b38611d52565b611e4490611bc889600052600d602052604060002090565b38611d4a565b611e6290611bc88a600052600c602052604060002090565b38611d42565b611e8090611bc88b600052600b602052604060002090565b38611d3a565b611e9e90611bc88c600052600a602052604060002090565b38611d32565b611ebc90611bc88d6000526009602052604060002090565b38611d2a565b611bc8611ed9926000526008602052604060002090565b8b38611d21565b6020906001600160401b038111611ef9575b60051b0190565b611f0161052e565b611ef2565b50634e487b7160e01b600052601160045260246000fd5b6001906000198114611f2d570190565b611f35611f06565b0190565b50634e487b7160e01b600052603260045260246000fd5b600092918154611f5f8161126e565b92600191808316908115611fb85750600114611f7c575b50505050565b90919293945060005260209081600020906000915b858310611fa75750505050019038808080611f76565b805485840152918301918101611f91565b60ff1916845250505081151590910201915038808080611f76565b60405190604082018281106001600160401b03821117612015575b604052601582527468747470733a2f2f6176617461616172732e696f2f60581b6020830152565b61201d61052e565b611fee565b90611f356020928281519485920161022d565b60405190606082018281106001600160401b038211176120a5575b604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b6120ad61052e565b612050565b90600282018092116120c057565b611d94611f06565b90602082018092116120c057565b600281901b91906001600160fe1b038116036120c057565b906120f88261058e565b612105604051918261056d565b8281528092612116601f199161058e565b0190602036910137565b8051156122005761212f612035565b61214b61214661213f84516120b2565b6003900490565b6120d6565b9161215d612158846120c8565b6120ee565b92835280815182019060208501935b8282106121ae5750505060039051068060011461219d5760021461218e575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c168801015160028601531685010151908201530193919061216c565b506102866113ba565b61221d816000526009602052604060002090565b61223182600052600a602052604060002090565b9161224681600052600b602052604060002090565b9061225b81600052600c602052604060002090565b61226f82600052600d602052604060002090565b61228383600052600e602052604060002090565b61229784600052600f602052604060002090565b906122ac856000526010602052604060002090565b926122c1866000526011602052604060002090565b946122d6876000526012602052604060002090565b966122eb906000526013602052604060002090565b976040519a8b9a60208c016c3f6176617461725374796c653d60981b9052602d8c0161231691611f50565b6826746f70547970653d60b81b815260090161233191611f50565b6a2668616972436f6c6f723d60a81b8152600b0161234e91611f50565b6c2665796562726f77547970653d60981b8152600d0161236d91611f50565b6826657965547970653d60b81b815260090161238891611f50565b70266163636573736f72696573547970653d60781b81526011016123ab91611f50565b6a266d6f757468547970653d60a81b8152600b016123c891611f50565b6f2666616369616c48616972547970653d60801b81526010016123ea91611f50565b6b26636c6f746865547970653d60a01b8152600c0161240891611f50565b6c26636c6f746865436f6c6f723d60981b8152600d0161242791611f50565b6c2667726170686963547970653d60981b8152600d0161244691611f50565b03601f1981018252610286908261056d565b61246c816000526009602052604060002090565b61248082600052600a602052604060002090565b9161249581600052600b602052604060002090565b906124aa81600052600c602052604060002090565b6124be82600052600d602052604060002090565b6124d283600052600e602052604060002090565b6124e684600052600f602052604060002090565b906124fb856000526010602052604060002090565b92612510866000526011602052604060002090565b94612525876000526012602052604060002090565b9661253a906000526013602052604060002090565b976040519a8b9a60208c017f7b202274726169745f74797065223a20226176617461725374796c65222c20229052683b30b63ab291101d1160b91b60408d015260498c0161258791611f50565b7f227d2c207b2274726169745f74797065223a2022746f7054797065222c20227681526730b63ab291101d1160c11b60208201526028016125c791611f50565b7f227d2c7b2274726169745f74797065223a202268616972436f6c6f72222c20228152683b30b63ab291101d1160b91b602082015260290161260891611f50565b7f227d2c207b2274726169745f74797065223a202265796562726f77547970652281526b1610113b30b63ab291101d1160a11b6020820152602c0161264c91611f50565b7f227d2c207b2274726169745f74797065223a202265796554797065222c20227681526730b63ab291101d1160c11b602082015260280161268c91611f50565b7f227d2c207b2274726169745f74797065223a20226163636573736f726965735481526f3cb832911610113b30b63ab291101d1160811b60208201526030016126d491611f50565b7f227d2c7b2274726169745f74797065223a20226d6f75746854797065222c20228152683b30b63ab291101d1160b91b602082015260290161271591611f50565b7f227d2c207b2274726169745f74797065223a202266616369616c48616972547981526e3832911610113b30b63ab291101d1160891b6020820152602f0161275c91611f50565b7f227d2c207b2274726169745f74797065223a2022636c6f74686554797065222c81526a10113b30b63ab291101d1160a91b6020820152602b0161279f91611f50565b7f227d2c207b2274726169745f74797065223a2022636c6f746865436f6c6f722281526b1610113b30b63ab291101d1160a11b6020820152602c016127e391611f50565b7f227d2c7b2274726169745f74797065223a20226772617068696354797065222c81526a10113b30b63ab291101d1160a91b6020820152602b0161282691611f50565b620113e960ed1b8152600301612446565b602190805160011015612848570190565b611f35611f39565b90602091805182101561286257010190565b61286a611f39565b010190565b801561287d575b6000190190565b612885611f06565b612876565b6040519061289782610545565b602a8252603060208301604036823783511561291b575b5360786128ba83612837565b536029905b600182116128cc57505090565b80600f6129089216601081101561290e575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a6128fe8486612850565b5360041c9161286f565b906128bf565b612916611f39565b6128de565b612923611f39565b6128ae56fea26469706673582212209dee0d7b1d9627414b9638572e70b41661b952a3551bae7290386e848da4814f64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a7146101a357806306fdde031461019a578063081812fc14610191578063095ea7b31461018857806323b872dd1461017f5780633d0087cc1461017657806342842e0e1461016d5780636352211e1461016457806370a082311461015b578063715018a614610152578063768c8a0a146101495780638da5cb5b1461014057806395d89b4114610137578063a22cb4651461012e578063b88d4fde14610125578063c87b56dd1461011c578063d94719dc14610113578063e985e9c51461010a578063f20fd529146101015763f2fde38b146100f957600080fd5b61000e611066565b5061000e610f21565b5061000e610ec3565b5061000e610def565b5061000e610b9b565b5061000e610b3b565b5061000e610a4e565b5061000e6109a8565b5061000e61097e565b5061000e610852565b5061000e6107f3565b5061000e6107c7565b5061000e6107a8565b5061000e610761565b5061000e61060a565b5061000e610504565b5061000e6103f8565b5061000e61036d565b5061000e610289565b5061000e6101be565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5760206004356101de816101ac565b63ffffffff60e01b166380ac58cd60e01b811490811561021c575b811561020b575b506040519015158152f35b6301ffc9a760e01b14905038610200565b635b5e139f60e01b811491506101f9565b60005b8381106102405750506000910152565b8181015183820152602001610230565b906020916102698151809281855285808601910161022d565b601f01601f1916010190565b906020610286928181520190610250565b90565b503461000e5760008060031936011261036a57604051908080546102ac8161126e565b8085529160019180831690811561034057506001146102e6575b6102e2856102d68187038261056d565b60405191829182610275565b0390f35b80809450527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8284106103285750505081016020016102d6826102e26102c6565b8054602085870181019190915290930192810161030d565b8695506102e2969350602092506102d694915060ff191682840152151560051b82010192936102c6565b80fd5b503461000e57602036600319011261000e57602061038c60043561131a565b6040516001600160a01b039091168152f35b600435906001600160a01b038216820361000e57565b6101c435906001600160a01b038216820361000e57565b61014435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e5761041261039e565b60243561041e8161124b565b916001600160a01b038084169082168114610480576104509361044b913314908115610452575b506112a8565b6116c1565b005b6001600160a01b0316600090815260056020908152604080832033845290915290205460ff16905038610445565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b606090600319011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e57610450610516366104cf565b916105296105248433611486565b611358565b611558565b50634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761056057604052565b61056861052e565b604052565b90601f801991011681019081106001600160401b0382111761056057604052565b6020906001600160401b0381116105ab575b601f01601f19160190565b6105b361052e565b6105a0565b9291926105c48261058e565b916105d2604051938461056d565b82948184528183011161000e578281602093846000960137010152565b9080601f8301121561000e57816020610286933591016105b8565b503461000e576101e036600319011261000e5760046001600160401b03813581811161000e5761063d90369084016105ef565b60243582811161000e5761065490369085016105ef565b9060443583811161000e5761066c90369086016105ef565b9260643581811161000e5761068490369087016105ef565b9060843581811161000e5761069c90369088016105ef565b60a43582811161000e576106b390369089016105ef565b60c43583811161000e576106ca9036908a016105ef565b60e43584811161000e576106e19036908b016105ef565b906101043585811161000e576106fa9036908c016105ef565b926101243586811161000e576107139036908d016105ef565b946101443587811161000e578c61072c913691016105ef565b966101643590811161000e576104509c610748913691016105ef565b976107516103b4565b9b6101a4359b610184359b61185e565b503461000e57610450610773366104cf565b9060405192602084018481106001600160401b0382111761079b575b604052600084526113eb565b6107a361052e565b61078f565b503461000e57602036600319011261000e57602061038c60043561124b565b503461000e57602036600319011261000e5760206107eb6107e661039e565b611188565b604051908152f35b503461000e5760008060031936011261036a5761080e611130565b600680546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461000e5761016036600319011261000e576001600160401b036004803582811161000e5761088590369083016105ef565b60243583811161000e5761089c90369084016105ef565b60443584811161000e576108b390369085016105ef565b60643585811161000e576108ca90369086016105ef565b60843586811161000e576108e190369087016105ef565b60a43587811161000e576108f890369088016105ef565b60c43588811161000e5761090f90369089016105ef565b9160e43589811161000e576109279036908a016105ef565b93610104358a811161000e576109409036908b016105ef565b95610124359a8b1161000e5761095f61096e9a6102e29c3691016105ef565b976109686103cb565b99611ab8565b6040519081529081906020820190565b503461000e57600036600319011261000e576006546040516001600160a01b039091168152602090f35b503461000e5760008060031936011261036a57604051908060018054916109ce8361126e565b8086529282811690811561034057506001146109f4576102e2856102d68187038261056d565b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b828410610a365750505081016020016102d6826102e26102c6565b80546020858701810191909152909301928101610a1b565b503461000e57604036600319011261000e57610a6861039e565b602435801515810361000e576001600160a01b03821691338314610af65781610ab3610ac49233600052600560205260406000209060018060a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b503461000e57608036600319011261000e57610b5561039e565b610b5d6103e2565b606435916001600160401b03831161000e573660238401121561000e57610b916104509336906024816004013591016105b8565b91604435916113eb565b503461000e5760208060031936011261000e57600435610bc5816000526008602052604060002090565b60409182518092858201610bd891611f50565b0391601f19928381018252610bed908261056d565b83519182868101610c18906013907221b7b7b632b9ba103833381034b7103a37bbb760691b81520190565b038481018452610c28908461056d565b610c30611fd3565b90610c3a81612209565b918651928391898301610c4c91612022565b610c5591612022565b038581018352610c65908361056d565b610c6e81612458565b90610c789061124b565b610c8a906001600160a01b031661288a565b908651948594898601610cad90600990683d913730b6b2911d1160b91b81520190565b610cb691612022565b71111610113232b9b1b934b83a34b7b7111d1160711b8152601201610cda91612022565b71222c202261747472696275746573223a205b60701b8152601201610cfe91612022565b6b2e96101137bbb732b9111d1160a11b8152600c01610d1c91612022565b6c1116101134b6b0b3b2911d101160991b8152600d01610d3b91612022565b61227d60f01b8152600201038281018252610d56908261056d565b610d5f90612120565b82517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000094810194855293849190601d01610d9891612022565b039081018352610da8908361056d565b516102e2819282610275565b6020908160408183019282815285518094520193019160005b828110610ddb575050505090565b835185529381019392810192600101610dcd565b503461000e5760208060031936011261000e57610e0a61039e565b610e1381611188565b91610e1d83611ee0565b92610e2b604051948561056d565b808452610e3a601f1991611ee0565b01368285013760075491600091906001600160a01b039081169060015b85811115610e6d57604051806102e28982610db4565b8282610e788361124b565b1614610e8d575b610e8890611f1d565b610e57565b93610eae610e88918851811015610eb6575b86868260051b8b010152611f1d565b949050610e7f565b610ebe611f39565b610e9f565b503461000e57604036600319011261000e57602060ff610f15610ee461039e565b610eec6103e2565b6001600160a01b0391821660009081526005865260408082209290931681526020919091522090565b54166040519015158152f35b503461000e576101a036600319011261000e576001600160401b0360243581811161000e57610f55600491369083016105ef565b60443583811161000e57610f6c90369084016105ef565b60643584811161000e57610f8390369085016105ef565b60843585811161000e57610f9a90369086016105ef565b60a43586811161000e57610fb190369087016105ef565b60c43587811161000e57610fc890369088016105ef565b60e43588811161000e57610fdf90369089016105ef565b916101043589811161000e57610ff89036908a016105ef565b93610124358a811161000e576110119036908b016105ef565b95610144358b811161000e5761102a9036908c016105ef565b97610164358c811161000e576110439036908d016105ef565b99610184359c8d1161000e5761105f8c6104509e3691016105ef565b9b35611d0d565b503461000e57602036600319011261000e5761108061039e565b611088611130565b6001600160a01b039081169081156110dc57600654826bffffffffffffffffffffffff60a01b821617600655167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6006546001600160a01b0316330361114457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160a01b031680156111a857600052600360205260406000205490565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b1561120657565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152600260205260409020546001600160a01b03166102868115156111ff565b90600182811c9216801561129e575b602083101461128857565b634e487b7160e01b600052602260045260246000fd5b91607f169161127d565b156112af57565b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b60008181526002602052604090205461133d906001600160a01b031615156111ff565b6000908152600460205260409020546001600160a01b031690565b1561135f57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b60405190602082018281106001600160401b038211176113de575b60405260008252565b6113e661052e565b6113d5565b9061140f9392916113ff6105248433611486565b61140a838383611558565b61179b565b1561141657565b60405162461bcd60e51b81528061142f60048201611433565b0390fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b6001600160a01b03806114988461124b565b1692818316928484149485156114ce575b505083156114b8575b50505090565b6114c49192935061131a565b16143880806114b2565b60009081526005602090815260408083206001600160a01b03949094168352929052205460ff16935038806114a9565b1561150557565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b61157c906115658461124b565b6001600160a01b03828116939091821684146114fe565b8316928315611670576115ef611649926115ae856115a861159c8a61124b565b6001600160a01b031690565b146114fe565b6115d56115c5886000526004602052604060002090565b80546001600160a01b0319169055565b6001600160a01b0316600090815260036020526040902090565b80546000190190556001600160a01b03811660009081526003602052604090206001815401905561162a856000526002602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b600082815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b03806116fa8461124b565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4565b9081602091031261000e5751610286816101ac565b6001600160a01b03918216815291166020820152604081019190915260806060820181905261028692910190610250565b3d15611796573d9061177c8261058e565b9161178a604051938461056d565b82523d6000602084013e565b606090565b92909190823b15611855576117ce926020926000604051809681958294630a85bd0160e11b9a8b8552336004860161173a565b03926001600160a01b03165af160009181611825575b50611817576117f161176b565b805190816118125760405162461bcd60e51b81528061142f60048201611433565b602001fd5b6001600160e01b0319161490565b61184791925060203d811161184e575b61183f818361056d565b810190611725565b90386117e4565b503d611835565b50505050600190565b9d9a98969492909c99979593916040519e8f9e8f916101e0808452830161188491610250565b828103602084015261189591610250565b9080820390604001526118a791610250565b8d810360608f01526118b891610250565b8c810360808e01526118c991610250565b8b810360a08d01526118da91610250565b8a810360c08c01526118eb91610250565b89810360e08b01526118fc91610250565b8881036101008a015261190e91610250565b87810361012089015261192091610250565b86810361014088015261193291610250565b85810361016087015261194491610250565b6101808501939093526101a08401526001600160a01b03166101c0830152037fec6f5abb6d06f755fe8458400db290a6d243e9739e9df87d230b155081d9a21391a1565b90601f811161199657505050565b600091825260208220906020601f850160051c830194106119d2575b601f0160051c01915b8281106119c757505050565b8181556001016119bb565b90925082906119b2565b91909182516001600160401b038111611aab575b611a04816119fe845461126e565b84611988565b602080601f8311600114611a40575081929394600092611a35575b50508160011b916000199060031b1c1916179055565b015190503880611a1f565b90601f19831695611a5685600052602060002090565b926000905b888210611a9357505083600195969710611a7a575b505050811b019055565b015160001960f88460031b161c19169055388080611a70565b80600185968294968601518155019501930190611a5b565b611ab361052e565b6119f0565b929693949897959190986001600754019a8b60075560018060a01b038116968715611c7d57611c05611c699a611bc88f6102869f611c2d98611be1611bf592611c559f611c419e86611bcd92611b8e611c199e611b39611b34611b3086600052600260205260018060a01b0360406000205416151590565b1590565b611cc1565b600084815260026020526040902054611b5b906001600160a01b031615611cc1565b6001600160a01b03811660009081526003602052604090206001815401905561162a846000526002602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4611bc8876000526008602052604060002090565b6119dc565b611bc8856000526009602052604060002090565b611bc883600052600a602052604060002090565b600052600b602052604060002090565b611bc88d600052600c602052604060002090565b611bc88b600052600d602052604060002090565b611bc889600052600e602052604060002090565b611bc887600052600f602052604060002090565b611bc8856000526010602052604060002090565b611bc8836000526011602052604060002090565b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b15611cc857565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b809c9b9a9998979695949392918051611ec2575b50508051611ea4575b508051611e86575b508051611e68575b508051611e4a575b508051611e2c575b508051611e0e575b508051611df0575b508051611dd2575b508051611db4575b508051611d96575b508051611d7d575050565b611bc8611d94926000526013602052604060002090565b565b611dae90611bc8846000526012602052604060002090565b38611d72565b611dcc90611bc8856000526011602052604060002090565b38611d6a565b611dea90611bc8866000526010602052604060002090565b38611d62565b611e0890611bc887600052600f602052604060002090565b38611d5a565b611e2690611bc888600052600e602052604060002090565b38611d52565b611e4490611bc889600052600d602052604060002090565b38611d4a565b611e6290611bc88a600052600c602052604060002090565b38611d42565b611e8090611bc88b600052600b602052604060002090565b38611d3a565b611e9e90611bc88c600052600a602052604060002090565b38611d32565b611ebc90611bc88d6000526009602052604060002090565b38611d2a565b611bc8611ed9926000526008602052604060002090565b8b38611d21565b6020906001600160401b038111611ef9575b60051b0190565b611f0161052e565b611ef2565b50634e487b7160e01b600052601160045260246000fd5b6001906000198114611f2d570190565b611f35611f06565b0190565b50634e487b7160e01b600052603260045260246000fd5b600092918154611f5f8161126e565b92600191808316908115611fb85750600114611f7c575b50505050565b90919293945060005260209081600020906000915b858310611fa75750505050019038808080611f76565b805485840152918301918101611f91565b60ff1916845250505081151590910201915038808080611f76565b60405190604082018281106001600160401b03821117612015575b604052601582527468747470733a2f2f6176617461616172732e696f2f60581b6020830152565b61201d61052e565b611fee565b90611f356020928281519485920161022d565b60405190606082018281106001600160401b038211176120a5575b604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b6120ad61052e565b612050565b90600282018092116120c057565b611d94611f06565b90602082018092116120c057565b600281901b91906001600160fe1b038116036120c057565b906120f88261058e565b612105604051918261056d565b8281528092612116601f199161058e565b0190602036910137565b8051156122005761212f612035565b61214b61214661213f84516120b2565b6003900490565b6120d6565b9161215d612158846120c8565b6120ee565b92835280815182019060208501935b8282106121ae5750505060039051068060011461219d5760021461218e575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c168801015160028601531685010151908201530193919061216c565b506102866113ba565b61221d816000526009602052604060002090565b61223182600052600a602052604060002090565b9161224681600052600b602052604060002090565b9061225b81600052600c602052604060002090565b61226f82600052600d602052604060002090565b61228383600052600e602052604060002090565b61229784600052600f602052604060002090565b906122ac856000526010602052604060002090565b926122c1866000526011602052604060002090565b946122d6876000526012602052604060002090565b966122eb906000526013602052604060002090565b976040519a8b9a60208c016c3f6176617461725374796c653d60981b9052602d8c0161231691611f50565b6826746f70547970653d60b81b815260090161233191611f50565b6a2668616972436f6c6f723d60a81b8152600b0161234e91611f50565b6c2665796562726f77547970653d60981b8152600d0161236d91611f50565b6826657965547970653d60b81b815260090161238891611f50565b70266163636573736f72696573547970653d60781b81526011016123ab91611f50565b6a266d6f757468547970653d60a81b8152600b016123c891611f50565b6f2666616369616c48616972547970653d60801b81526010016123ea91611f50565b6b26636c6f746865547970653d60a01b8152600c0161240891611f50565b6c26636c6f746865436f6c6f723d60981b8152600d0161242791611f50565b6c2667726170686963547970653d60981b8152600d0161244691611f50565b03601f1981018252610286908261056d565b61246c816000526009602052604060002090565b61248082600052600a602052604060002090565b9161249581600052600b602052604060002090565b906124aa81600052600c602052604060002090565b6124be82600052600d602052604060002090565b6124d283600052600e602052604060002090565b6124e684600052600f602052604060002090565b906124fb856000526010602052604060002090565b92612510866000526011602052604060002090565b94612525876000526012602052604060002090565b9661253a906000526013602052604060002090565b976040519a8b9a60208c017f7b202274726169745f74797065223a20226176617461725374796c65222c20229052683b30b63ab291101d1160b91b60408d015260498c0161258791611f50565b7f227d2c207b2274726169745f74797065223a2022746f7054797065222c20227681526730b63ab291101d1160c11b60208201526028016125c791611f50565b7f227d2c7b2274726169745f74797065223a202268616972436f6c6f72222c20228152683b30b63ab291101d1160b91b602082015260290161260891611f50565b7f227d2c207b2274726169745f74797065223a202265796562726f77547970652281526b1610113b30b63ab291101d1160a11b6020820152602c0161264c91611f50565b7f227d2c207b2274726169745f74797065223a202265796554797065222c20227681526730b63ab291101d1160c11b602082015260280161268c91611f50565b7f227d2c207b2274726169745f74797065223a20226163636573736f726965735481526f3cb832911610113b30b63ab291101d1160811b60208201526030016126d491611f50565b7f227d2c7b2274726169745f74797065223a20226d6f75746854797065222c20228152683b30b63ab291101d1160b91b602082015260290161271591611f50565b7f227d2c207b2274726169745f74797065223a202266616369616c48616972547981526e3832911610113b30b63ab291101d1160891b6020820152602f0161275c91611f50565b7f227d2c207b2274726169745f74797065223a2022636c6f74686554797065222c81526a10113b30b63ab291101d1160a91b6020820152602b0161279f91611f50565b7f227d2c207b2274726169745f74797065223a2022636c6f746865436f6c6f722281526b1610113b30b63ab291101d1160a11b6020820152602c016127e391611f50565b7f227d2c7b2274726169745f74797065223a20226772617068696354797065222c81526a10113b30b63ab291101d1160a91b6020820152602b0161282691611f50565b620113e960ed1b8152600301612446565b602190805160011015612848570190565b611f35611f39565b90602091805182101561286257010190565b61286a611f39565b010190565b801561287d575b6000190190565b612885611f06565b612876565b6040519061289782610545565b602a8252603060208301604036823783511561291b575b5360786128ba83612837565b536029905b600182116128cc57505090565b80600f6129089216601081101561290e575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a6128fe8486612850565b5360041c9161286f565b906128bf565b612916611f39565b6128de565b612923611f39565b6128ae56fea26469706673582212209dee0d7b1d9627414b9638572e70b41661b952a3551bae7290386e848da4814f64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 148,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 152,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 158,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2842,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)1558_storage"
      },
      {
        "astId": 2877,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_nftName",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2881,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_avatarStyle",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2885,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_topType",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2889,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_hairColor",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2893,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_eyebrowType",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2897,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_eyeType",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2901,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_accessoriesType",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2905,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_mouthType",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2909,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_facialHairType",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2913,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_clotheType",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2917,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_clotheColor",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2921,
        "contract": "contracts/Minter.sol:Nimbus",
        "label": "_graphicType",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1558_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1557,
            "contract": "contracts/Minter.sol:Nimbus",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}